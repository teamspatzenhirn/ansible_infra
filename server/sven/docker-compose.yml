services:
  certbot-spatz:
    image: serversideup/certbot-dns-cloudflare:v1.3.0
    container_name: certbot-spatz
    restart: always
    # user: "${UID}:${GID}"
    volumes:
      - certs:/etc/letsencrypt
    environment:
      CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}"
      CERTBOT_EMAIL: "${CERTBOT_EMAIL}"
      CLOUDFLARE_PROPAGATION_SECONDS: 30
      CERTBOT_DOMAINS: "spatz.wtf,ftp.spatz.wtf,static.spatz.wtf,*.sven.spatz.wtf,hc.spatz.wtf"

  certbot-idm:
    image: serversideup/certbot-dns-cloudflare:v1.3.0
    container_name: certbot-idm
    restart: always
    # user: "${UID}:${GID}"
    volumes:
      - certs:/etc/letsencrypt
    environment:
      CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}"
      CERTBOT_EMAIL: "${CERTBOT_EMAIL}"
      CLOUDFLARE_PROPAGATION_SECONDS: 30
      CERTBOT_DOMAINS: "idm.spatz.wtf"

  certbot-vpn:
    image: serversideup/certbot-dns-cloudflare:v1.3.0
    container_name: certbot-vpn
    restart: always
    # user: "${UID}:${GID}"
    volumes:
      - certs:/etc/letsencrypt
    environment:
      CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}"
      CERTBOT_EMAIL: "${CERTBOT_EMAIL}"
      CLOUDFLARE_PROPAGATION_SECONDS: 30
      CERTBOT_DOMAINS: "vpn.spatz.wtf"

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    # user: "${UID}:${GID}"
    ports:
      - "80:80/tcp" # web
      - "443:443/tcp" # websecure
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./traefik/traefik.yml:/traefik.yml
      - ./traefik/rules:/rules
      - certs:/certs:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --configFile=/traefik.yml
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.sven.${DOMAIN}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: true

  sftpgo:
    image: drakkan/sftpgo:v2.6-alpine
    container_name: sftpgo
    restart: always
    ports:
      - "2121:2121"
      - "2022:2022"
    # volumes:
    # - # add whatever folders we need
    # environment:
    # - SFTPGO_DATA_PROVIDER_CREATE_DEFAULT_ADMIN: true
    # - SFTPGO_FTPD_BINDINGS_0_PORT: 2121
    labels:
      traefik.enable: true
      traefik.http.services.sftpgo-ui.loadbalancer.server.port: 8080
      traefik.http.routers.sftpgo-ui.rule: Host(`ftp.${DOMAIN}`)
      traefik.http.routers.sftpgo-ui.entrypoints: websecure
      traefik.http.routers.sftpgo-ui.service: sftpgo-ui
      traefik.http.routers.sftpgo-ui.tls: true

  httpd:
    image: httpd:2.4-alpine
    container_name: httpd
    restart: always
    volumes:
      - ./httpd/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
      - httpd_static_files:/static_files:ro
    labels:
      traefik.enable: true
      traefik.http.services.httpd.loadbalancer.server.port: 80
      traefik.http.routers.httpd.rule: Host(`static.${DOMAIN}`)
      traefik.http.routers.httpd.entrypoints: websecure
      traefik.http.routers.httpd.service: httpd
      traefik.http.routers.httpd.tls: true

  kanidm:
    image: kanidm/server:1.7.3
    container_name: kanidm
    restart: always
    volumes:
      - certs:/certs:ro
      - ./kanidm/server.toml:/data/server.toml:ro
      - kanidm_data:/data
    labels:
      traefik.enable: true
      traefik.http.services.kanidm.loadbalancer.server.port: 8443
      traefik.http.services.kanidm.loadbalancer.server.scheme: https
      traefik.http.routers.kanidm.rule: Host(`idm.${DOMAIN}`)
      traefik.http.routers.kanidm.entrypoints: websecure
      traefik.http.routers.kanidm.service: kanidm
      traefik.http.routers.kanidm.tls: true

  ####################
  # NetBird Services #
  ####################

  netbird-dashboard:
    image: netbirdio/dashboard:v2.18.0
    container_name: netbird-dashboard
    restart: always
    environment:
      NETBIRD_MGMT_API_ENDPOINT: https://vpn.${DOMAIN}
      NETBIRD_MGMT_GRPC_API_ENDPOINT: https://vpn.${DOMAIN}
      AUTH_AUDIENCE: netbird
      AUTH_CLIENT_ID: netbird
      AUTH_AUTHORITY: https://idm.${DOMAIN}/oauth2/openid/netbird
      USE_AUTH0: false
      AUTH_SUPPORTED_SCOPES: openid profile email
      AUTH_REDIRECT_URI: /auth
      AUTH_SILENT_REDIRECT_URI: /silent-auth
      NETBIRD_TOKEN_SOURCE: idToken
      NGINX_SSL_PORT: 443
    labels:
      traefik.enable: true
      traefik.http.services.netbird-dashboard.loadbalancer.server.port: 80
      traefik.http.routers.netbird-dashboard.rule: Host(`vpn.${DOMAIN}`)
      traefik.http.routers.netbird-dashboard.tls: true
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "2"

  netbird-signal:
    image: netbirdio/signal:0.56.0
    container_name: netbird-signal
    restart: always
    volumes:
      - netbird_signal:/var/lib/netbird
    labels:
      traefik.enable: true
      traefik.http.services.netbird-signal.loadbalancer.server.port: 10000
      traefik.http.services.netbird-signal.loadbalancer.server.scheme: h2c
      traefik.http.routers.netbird-signal.rule: Host(`vpn.${DOMAIN}`) && PathPrefix(`/signalexchange.SignalExchange/`)
      traefik.http.routers.netbird-signal.tls: true
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "2"

  netbird-relay:
    image: netbirdio/relay:0.56.0
    container_name: netbird-relay
    restart: always
    environment:
      NB_LOG_LEVEL: info
      NB_LISTEN_ADDRESS: :33080
      NB_EXPOSED_ADDRESS: rels://vpn.${DOMAIN}:443/relay
      NB_AUTH_SECRET: $NETBIRD_RELAY_AUTH_SECRET
    labels:
      traefik.enable: true
      traefik.http.services.netbird-relay.loadbalancer.server.port: 33080
      traefik.http.routers.netbird-relay.rule: Host(`vpn.${DOMAIN}`) && PathPrefix(`/relay`)
      traefik.http.routers.netbird-relay.tls: true
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "2"

  netbird-management:
    image: netbirdio/management:0.56.0
    container_name: netbird-management
    restart: always
    depends_on:
      - netbird-dashboard
    command:
      [
        "--port",
        "443",
        "--log-file",
        "console",
        "--log-level",
        "info",
        "--disable-anonymous-metrics=true",
        "--single-account-mode-domain=vpn.${DOMAIN}",
        "--dns-domain=spatz.vpn",
      ]
    volumes:
      - netbird_management:/var/lib/netbird
      - ./netbird/management.json:/etc/netbird/management.json
    labels:
      traefik.enable: true
      traefik.http.services.netbird-api.loadbalancer.server.port: 443
      traefik.http.routers.netbird-api.rule: Host(`vpn.${DOMAIN}`) && PathPrefix(`/api`)
      traefik.http.routers.netbird-api.service: netbird-api
      traefik.http.routers.netbird-api.tls: true

      traefik.http.services.netbird-management.loadbalancer.server.port: 443
      traefik.http.services.netbird-management.loadbalancer.server.scheme: h2c
      traefik.http.routers.netbird-management.rule: Host(`vpn.${DOMAIN}`) && PathPrefix(`/management.ManagementService/`)
      traefik.http.routers.netbird-management.service: netbird-management
      traefik.http.routers.netbird-management.tls: true
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "2"

  netbird-coturn:
    image: coturn/coturn:4-alpine
    restart: always
    domainname: vpn.$DOMAIN
    network_mode: host
    volumes:
      - ./netbird/turnserver.conf:/etc/turnserver.conf:ro
    command:
      - -c /etc/turnserver.conf
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "2"

  ####################
  #   Healthchecks   #
  ####################

  healthchecks_db:
    image: postgres:16
    container_name: healthchecks_db
    restart: always
    volumes:
      - healthcheck_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: hc
      POSTGRES_PASSWORD: $HC_DBPASS

  healthchecks_postfix:
    image: tozd/postfix:ubuntu-noble
    container_name: healthchecks_postfix
    restart: always
    environment:
      - MY_NETWORKS=0.0.0.0/0

  healthchecks:
    image: healthchecks/healthchecks:v3.10
    container_name: healthchecks
    restart: always
    env_file:
      - healthchecks.env
    environment:
      SECRET_KEY: $HC_SECRETKEY
      DB_HOST: healthchecks_db
      DB_NAME: hc
      DB_PASSWORD: $HC_DBPASS
      EMAIL_HOST: healthchecks_postfix
      DEFAULT_FROM_EMAIL: healthchecks@${DOMAIN}
      DISCORD_CLIENT_ID: $HC_DISCORD_ID
      DISCORD_CLIENT_SECRET: $HC_DISCORD_SECRET
      SITE_ROOT: https://hc.${DOMAIN}
    depends_on:
      - healthchecks_db
      - healthchecks_postfix
    labels:
      traefik.enable: true
      traefik.http.services.healthchecks.loadbalancer.server.port: 8000
      traefik.http.routers.healthchecks.rule: Host(`hc.${DOMAIN}`)
      traefik.http.routers.healthchecks.tls: true
    #command: bash -c 'while !</dev/tcp/healthchecks_db/5432; do sleep 1; done; uwsgi /opt/healthchecks/docker/uwsgi.ini'

volumes:
  certs:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./certbot"
  httpd_static_files:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/auxiliary/static_files"
  kanidm_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/auxiliary/kanidm"
  netbird_signal:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/auxiliary/netbird/signal"
  netbird_management:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/auxiliary/netbird/management"
  healthcheck_db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/mnt/auxiliary/healthcheck_db"
